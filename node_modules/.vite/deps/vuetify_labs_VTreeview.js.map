{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VTreeview/VTreeviewGroup.tsx", "../../vuetify/src/labs/VTreeview/VTreeviewItem.tsx", "../../vuetify/src/labs/VTreeview/shared.ts", "../../vuetify/src/labs/VTreeview/VTreeviewChildren.tsx", "../../vuetify/src/labs/VTreeview/VTreeview.tsx"],
  "sourcesContent": ["// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { makeVListGroupProps, VListGroup } from '@/components/VList/VListGroup'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VListGroupSlots } from '@/components/VList/VListGroup'\n\nexport const makeVTreeviewGroupProps = propsFactory({\n  ...omit(makeVListGroupProps({\n    collapseIcon: '$treeviewCollapse',\n    expandIcon: '$treeviewExpand',\n  }), ['subgroup']),\n}, 'VTreeviewGroup')\n\nexport const VTreeviewGroup = genericComponent<VListGroupSlots>()({\n  name: 'VTreeviewGroup',\n\n  props: makeVTreeviewGroupProps(),\n\n  setup (props, { slots }) {\n    const vListGroupRef = ref<VListGroup>()\n    const toggleIcon = computed(() => vListGroupRef.value?.isOpen ? props.collapseIcon : props.expandIcon)\n\n    const activatorDefaults = computed(() => ({\n      VTreeviewItem: {\n        prependIcon: undefined,\n        appendIcon: undefined,\n        active: vListGroupRef.value?.isOpen,\n        toggleIcon: toggleIcon.value,\n      },\n    }))\n\n    useRender(() => {\n      const listGroupProps = VListGroup.filterProps(props)\n\n      return (\n        <VListGroup\n          { ...listGroupProps }\n          ref={ vListGroupRef }\n          class={[\n            'v-treeview-group',\n            props.class,\n          ]}\n          subgroup\n        >\n          {{\n            ...slots,\n            activator: slots.activator ? slotProps => (\n              <>\n                <VDefaultsProvider defaults={ activatorDefaults.value }>\n                  { slots.activator?.(slotProps) }\n                </VDefaultsProvider>\n              </>\n            ) : undefined,\n          }}\n        </VListGroup>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTreeviewGroup = InstanceType<typeof VTreeviewGroup>\n", "// Styles\nimport './VTreeviewItem.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VListItemAction } from '@/components/VList'\nimport { makeVListItemProps, VListItem } from '@/components/VList/VListItem'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useNestedItem } from '@/composables/nested/nested'\nimport { useLink } from '@/composables/router'\n\n// Utilities\nimport { computed, inject, ref } from 'vue'\nimport { EventProp, genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTreeviewSymbol } from './shared'\nimport type { VListItemSlots } from '@/components/VList/VListItem'\n\nexport const makeVTreeviewItemProps = propsFactory({\n  loading: Boolean,\n  onToggleExpand: EventProp<[MouseEvent]>(),\n  toggleIcon: IconValue,\n\n  ...makeVListItemProps({ slim: true }),\n}, 'VTreeviewItem')\n\nexport const VTreeviewItem = genericComponent<VListItemSlots>()({\n  name: 'VTreeviewItem',\n\n  props: makeVTreeviewItemProps(),\n\n  setup (props, { attrs, slots, emit }) {\n    const link = useLink(props, attrs)\n    const rawId = computed(() => props.value === undefined ? link.href.value : props.value)\n    const vListItemRef = ref<VListItem>()\n\n    const {\n      activate,\n      isActivated,\n      isGroupActivator,\n      root,\n      id,\n    } = useNestedItem(rawId, false)\n\n    const isActivatableGroupActivator = computed(() =>\n      (root.activatable.value) &&\n      isGroupActivator\n    )\n\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (props.link || link.isClickable.value || (props.value != null && !!vListItemRef.value?.list) || isActivatableGroupActivator.value)\n    )\n\n    function activateItem (e: MouseEvent | KeyboardEvent) {\n      if (\n        !isClickable.value ||\n        (!isActivatableGroupActivator.value && isGroupActivator)\n      ) return\n\n      if (root.activatable.value) {\n        if (isActivatableGroupActivator.value) {\n          activate(!isActivated.value, e)\n        } else {\n          vListItemRef.value?.activate(!vListItemRef.value?.isActivated, e)\n        }\n      }\n    }\n\n    const visibleIds = inject(VTreeviewSymbol, { visibleIds: ref() }).visibleIds\n\n    useRender(() => {\n      const listItemProps = omit(VListItem.filterProps(props), ['onClick'])\n      const hasPrepend = slots.prepend || props.toggleIcon\n\n      return (\n        <VListItem\n          { ...listItemProps }\n          active={ isActivated.value }\n          class={[\n            'v-treeview-item',\n            {\n              'v-treeview-item--activatable-group-activator': isActivatableGroupActivator.value,\n              'v-treeview-item--filtered': visibleIds.value && !visibleIds.value.has(id.value),\n            },\n            props.class,\n          ]}\n          ripple={ false }\n          onClick={ props.onClick ?? activateItem }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => {\n              return (\n                <>\n                  { props.toggleIcon && (\n                    <VListItemAction start={ false }>\n                      <VBtn\n                        density=\"compact\"\n                        icon={ props.toggleIcon }\n                        loading={ props.loading }\n                        variant=\"text\"\n                        onClick={ props.onToggleExpand }\n                      >\n                        {{\n                          loader () {\n                            return (\n                              <VProgressCircular\n                                indeterminate=\"disable-shrink\"\n                                size=\"20\"\n                                width=\"2\"\n                              />\n                            )\n                          },\n                        }}\n                      </VBtn>\n                    </VListItemAction>\n                  )}\n\n                  { slots.prepend?.(slotProps) }\n                </>\n              )\n            } : undefined,\n          }}\n        </VListItem>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTreeviewItem = InstanceType<typeof VTreeviewItem>\n", "// Types\nimport type { ComputedRef, InjectionKey } from 'vue'\n\nexport interface TreeViewProvide {\n  visibleIds: ComputedRef<Set<unknown> | null>\n}\n\nexport const VTreeviewSymbol: InjectionKey<TreeViewProvide> = Symbol.for('vuetify:v-treeview')\n", "// Components\nimport { VTreeviewGroup } from './VTreeviewGroup'\nimport { VTreeviewItem } from './VTreeviewItem'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { computed, shallowRef, toRaw, withModifiers } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { InternalListItem } from '@/components/VList/VList'\nimport type { VListItemSlots } from '@/components/VList/VListItem'\nimport type { SelectStrategyProp } from '@/composables/nested/nested'\nimport type { GenericProps } from '@/util'\n\nexport type VTreeviewChildrenSlots<T> = {\n  [K in keyof Omit<VListItemSlots, 'default'>]: VListItemSlots[K] & { item: T }\n} & {\n  default: never\n  item: { props: InternalListItem['props'] }\n}\n\nexport const makeVTreeviewChildrenProps = propsFactory({\n  loadChildren: Function as PropType<(item: unknown) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  items: Array as PropType<readonly InternalListItem[]>,\n  openOnClick: {\n    type: Boolean,\n    default: undefined,\n  },\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  returnObject: Boolean,\n  selectable: Boolean,\n  selectedColor: String,\n  selectStrategy: [String, Function, Object] as PropType<SelectStrategyProp>,\n}, 'VTreeviewChildren')\n\nexport const VTreeviewChildren = genericComponent<new <T extends InternalListItem>(\n  props: {\n    items?: readonly T[]\n  },\n  slots: VTreeviewChildrenSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTreeviewChildren',\n\n  props: makeVTreeviewChildrenProps(),\n\n  setup (props, { emit, slots }) {\n    const isLoading = shallowRef(null)\n\n    const isClickOnOpen = computed(() => props.openOnClick != null ? props.openOnClick : props.selectable)\n\n    function checkChildren (item: any) {\n      return new Promise<void>(resolve => {\n        if (!props.items?.length || !props.loadChildren) return resolve()\n\n        if (item?.children?.length === 0) {\n          isLoading.value = item.value\n          props.loadChildren(item).then(resolve)\n\n          return\n        }\n\n        resolve()\n      }).finally(() => {\n        isLoading.value = null\n      })\n    }\n\n    function selectItem (select: (value: boolean) => void, isSelected: boolean) {\n      if (props.selectable) {\n        select(!isSelected)\n      }\n    }\n\n    return () => slots.default?.() ?? props.items?.map(({ children, props: itemProps, raw: item }) => {\n      const loading = isLoading.value === item.value\n      const slotsWithItem = {\n        prepend: slotProps => (\n          <>\n            { props.selectable && (!children || (children && !['leaf', 'single-leaf'].includes(props.selectStrategy as string))) && (\n              <div>\n                <VCheckboxBtn\n                  key={ item.value }\n                  modelValue={ slotProps.isSelected }\n                  loading={ loading }\n                  color={ props.selectedColor }\n                  indeterminate={ slotProps.isIndeterminate }\n                  indeterminateIcon={ props.indeterminateIcon }\n                  falseIcon={ props.falseIcon }\n                  trueIcon={ props.trueIcon }\n                  onClick={ withModifiers(() => selectItem(slotProps.select, slotProps.isSelected), ['stop']) }\n                  onKeydown={ (e: KeyboardEvent) => {\n                    if (!['Enter', 'Space'].includes(e.key)) return\n                    e.stopPropagation()\n                    selectItem(slotProps.select, slotProps.isSelected)\n                  }}\n                />\n              </div>\n            )}\n\n            { slots.prepend?.({ ...slotProps, item }) }\n          </>\n        ),\n        append: slots.append ? slotProps => slots.append?.({ ...slotProps, item }) : undefined,\n        title: slots.title ? slotProps => slots.title?.({ ...slotProps, item }) : undefined,\n      } satisfies VTreeviewItem['$props']['$children']\n\n      const treeviewGroupProps = VTreeviewGroup.filterProps(itemProps)\n      const treeviewChildrenProps = VTreeviewChildren.filterProps(props)\n\n      return children ? (\n        <VTreeviewGroup\n          { ...treeviewGroupProps }\n          value={ props.returnObject ? item : treeviewGroupProps?.value }\n        >\n          {{\n            activator: ({ props: activatorProps }) => {\n              const listItemProps = {\n                ...itemProps,\n                ...activatorProps,\n                value: itemProps?.value,\n                onToggleExpand: activatorProps.onClick as any,\n                onClick: isClickOnOpen.value ? [() => checkChildren(item), activatorProps.onClick] as any : undefined,\n              }\n\n              return (\n                <VTreeviewItem\n                  { ...listItemProps }\n                  value={ props.returnObject ? toRaw(item) : itemProps.value }\n                  loading={ loading }\n                  v-slots={ slotsWithItem }\n                />\n              )\n            },\n            default: () => (\n              <VTreeviewChildren\n                { ...treeviewChildrenProps }\n                items={ children }\n                returnObject={ props.returnObject }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VTreeviewGroup>\n      ) : (\n        slots.item?.({ props: itemProps }) ?? (\n          <VTreeviewItem\n            { ...itemProps }\n            value={ props.returnObject ? toRaw(item) : itemProps.value }\n            v-slots={ slotsWithItem }\n          />\n        ))\n    })\n  },\n})\n", "// Components\nimport { makeVTreeviewChildrenProps, VTreeviewChildren } from './VTreeviewChildren'\nimport { makeVListProps, useListItems, VList } from '@/components/VList/VList'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, provide, ref, toRaw, toRef } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTreeviewSymbol } from './shared'\nimport type { InternalListItem } from '@/components/VList/VList'\nimport type { VListChildrenSlots } from '@/components/VList/VListChildren'\nimport type { ListItem } from '@/composables/list-items'\nimport type { GenericProps } from '@/util'\n\nfunction flatten (items: ListItem[], flat: ListItem[] = []) {\n  for (const item of items) {\n    flat.push(item)\n    if (item.children) flatten(item.children, flat)\n  }\n  return flat\n}\n\nexport const makeVTreeviewProps = propsFactory({\n  openAll: Boolean,\n  search: String,\n\n  ...makeFilterProps({ filterKeys: ['title'] }),\n  ...makeVTreeviewChildrenProps(),\n  ...omit(makeVListProps({\n    collapseIcon: '$treeviewCollapse',\n    expandIcon: '$treeviewExpand',\n    slim: true,\n  }), ['itemType', 'nav', 'openStrategy']),\n  modelValue: {\n    type: Array,\n    default: () => ([]),\n  },\n}, 'VTreeview')\n\nexport const VTreeview = genericComponent<new <T>(\n  props: {\n    items?: T[]\n  },\n  slots: VListChildrenSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTreeview',\n\n  props: makeVTreeviewProps(),\n\n  emits: {\n    'update:opened': (val: unknown) => true,\n    'update:activated': (val: unknown) => true,\n    'update:selected': (val: unknown) => true,\n    'update:modelValue': (val: unknown) => true,\n    'click:open': (value: { id: unknown, value: boolean, path: unknown[] }) => true,\n    'click:select': (value: { id: unknown, value: boolean, path: unknown[] }) => true,\n  },\n\n  setup (props, { slots }) {\n    const { items } = useListItems(props)\n    const activeColor = toRef(props, 'activeColor')\n    const baseColor = toRef(props, 'baseColor')\n    const color = toRef(props, 'color')\n    const activated = useProxiedModel(props, 'activated')\n    const model = useProxiedModel(props, 'modelValue')\n    const _selected = useProxiedModel(props, 'selected', props.modelValue)\n\n    const selected = computed({\n      get: () => _selected.value,\n      set (val) {\n        _selected.value = val\n        model.value = val\n      },\n    })\n\n    const vListRef = ref<VList>()\n\n    const opened = computed(() => props.openAll ? openAll(items.value) : props.opened)\n    const flatItems = computed(() => flatten(items.value))\n    const search = toRef(props, 'search')\n    const { filteredItems } = useFilter(props, flatItems, search)\n    const visibleIds = computed(() => {\n      if (!search.value) {\n        return null\n      }\n      return new Set(filteredItems.value.flatMap(item => {\n        return [...getPath(item.props.value), ...getChildren(item.props.value)]\n      }))\n    })\n\n    function getPath (id: unknown) {\n      const path: unknown[] = []\n      let parent: unknown = id\n      while (parent != null) {\n        path.unshift(parent)\n        parent = vListRef.value?.parents.get(parent)\n      }\n      return path\n    }\n\n    function getChildren (id: unknown) {\n      const arr: unknown[] = []\n      const queue = ((vListRef.value?.children.get(id) ?? []).slice())\n      while (queue.length) {\n        const child = queue.shift()\n        if (!child) continue\n        arr.push(child)\n        queue.push(...((vListRef.value?.children.get(child) ?? []).slice()))\n      }\n      return arr\n    }\n\n    function openAll (items: InternalListItem<any>[]) {\n      let ids: any[] = []\n\n      for (const i of items) {\n        if (!i.children) continue\n\n        ids.push(props.returnObject ? toRaw(i.raw) : i.value)\n\n        if (i.children) {\n          ids = ids.concat(openAll(i.children))\n        }\n      }\n\n      return ids\n    }\n\n    provide(VTreeviewSymbol, { visibleIds })\n\n    provideDefaults({\n      VTreeviewGroup: {\n        activeColor,\n        baseColor,\n        color,\n        collapseIcon: toRef(props, 'collapseIcon'),\n        expandIcon: toRef(props, 'expandIcon'),\n      },\n      VTreeviewItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        baseColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      const listProps = VList.filterProps(props)\n\n      const treeviewChildrenProps = VTreeviewChildren.filterProps(props)\n\n      return (\n        <VList\n          ref={ vListRef }\n          { ...listProps }\n          class={[\n            'v-treeview',\n            props.class,\n          ]}\n          open-strategy=\"multiple\"\n          style={ props.style }\n          opened={ opened.value }\n          v-model:activated={ activated.value }\n          v-model:selected={ selected.value }\n        >\n          <VTreeviewChildren\n            { ...treeviewChildrenProps }\n            returnObject={ props.returnObject }\n            items={ items.value }\n            v-slots={ slots }\n          ></VTreeviewChildren>\n        </VList>\n      )\n    })\n\n    return { }\n  },\n})\n\nexport type VTreeview = InstanceType<typeof VTreeview>\n"],
  "mappings": "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",
  "names": ["makeVTreeviewGroupProps", "propsFactory", "omit", "makeVListGroupProps", "collapseIcon", "expandIcon", "VTreeviewGroup", "genericComponent", "name", "props", "setup", "_ref", "slots", "vListGroupRef", "ref", "toggleIcon", "computed", "value", "isOpen", "activatorDefaults", "VTreeviewItem", "prependIcon", "undefined", "appendIcon", "active", "useRender", "listGroupProps", "VListGroup", "filterProps", "_createVNode", "_mergeProps", "class", "activator", "slotProps", "_Fragment", "VDefaultsProvider", "default", "VTreeviewSymbol", "Symbol", "for", "makeVTreeviewItemProps", "propsFactory", "loading", "Boolean", "onToggleExpand", "EventProp", "toggleIcon", "IconValue", "makeVListItemProps", "slim", "VTreeviewItem", "genericComponent", "name", "props", "setup", "_ref", "attrs", "slots", "emit", "link", "useLink", "rawId", "computed", "value", "undefined", "href", "vListItemRef", "ref", "activate", "isActivated", "isGroupActivator", "root", "id", "useNestedItem", "isActivatableGroupActivator", "activatable", "isClickable", "disabled", "list", "activateItem", "e", "visibleIds", "inject", "VTreeviewSymbol", "useRender", "listItemProps", "omit", "VListItem", "filterProps", "hasPrepend", "prepend", "_createVNode", "_mergeProps", "has", "class", "onClick", "slotProps", "_Fragment", "VListItemAction", "default", "VBtn", "loader", "VProgressCircular", "makeVTreeviewChildrenProps", "propsFactory", "loadChildren", "Function", "loadingIcon", "type", "String", "default", "items", "Array", "openOnClick", "Boolean", "undefined", "indeterminateIcon", "IconValue", "falseIcon", "trueIcon", "returnObject", "selectable", "selectedColor", "selectStrategy", "Object", "VTreeviewChildren", "genericComponent", "name", "props", "setup", "_ref", "emit", "slots", "isLoading", "shallowRef", "isClickOnOpen", "computed", "checkChildren", "item", "Promise", "resolve", "length", "children", "value", "then", "finally", "selectItem", "select", "isSelected", "map", "_ref2", "itemProps", "raw", "loading", "slotsWithItem", "prepend", "slotProps", "_createVNode", "_Fragment", "includes", "VCheckboxBtn", "isIndeterminate", "withModifiers", "e", "key", "stopPropagation", "append", "title", "treeviewGroupProps", "VTreeviewGroup", "filterProps", "treeviewChildrenProps", "_mergeProps", "activator", "_ref3", "activatorProps", "listItemProps", "onToggleExpand", "onClick", "VTreeviewItem", "toRaw", "flatten", "items", "flat", "arguments", "length", "undefined", "item", "push", "children", "makeVTreeviewProps", "propsFactory", "openAll", "Boolean", "search", "String", "makeFilterProps", "filterKeys", "makeVTreeviewChildrenProps", "omit", "makeVListProps", "collapseIcon", "expandIcon", "slim", "modelValue", "type", "Array", "default", "VTreeview", "genericComponent", "name", "props", "emits", "val", "value", "setup", "_ref", "slots", "useListItems", "activeColor", "toRef", "baseColor", "color", "activated", "useProxiedModel", "model", "_selected", "selected", "computed", "get", "set", "vListRef", "ref", "opened", "flatItems", "filteredItems", "useFilter", "visibleIds", "Set", "flatMap", "getPath", "getChildren", "id", "path", "parent", "unshift", "parents", "arr", "queue", "slice", "child", "shift", "ids", "i", "returnObject", "toRaw", "raw", "concat", "provide", "VTreeviewSymbol", "provideDefaults", "VTreeviewGroup", "VTreeviewItem", "activeClass", "density", "disabled", "lines", "variant", "useRender", "listProps", "VList", "filterProps", "treeviewChildrenProps", "VTreeviewChildren", "_createVNode", "_mergeProps", "class", "style", "$event"]
}
